Any database system must be able to persistently store data (otherwise it will lose everything each time it is restarted).
In this assignment, you must use the file system for this purpose.
Your database will consist of a number of tables (aka 'entities'), each containing a collection of rows
that store 'records' - see the table shown later in this section for an example.

Each table should be stored in a separate file using tab separated text. A <a href="resources/people.tab" target="_blank">sample data file</a>
has been provided to illustrate this file format. Note that the constructor method of the `DBServer` class in the template project
initialises a `storageFolderPath` variable to indicate which folder should be used to store the data files. This variable has been set to a folder called `databases` - it is essential that you store ALL of your data inside this directory (and nowhere else outside of it).

The first (0th) column in each table must contain a unique numerical identifier or 'primary key' (which should always be called `id`).
The `id` value of each row will NOT be provided by the user, but rather they should be automatically generated by the server.
It is up to you how you do this, however you should ensure that each `id` is unique (within the table where is resides).

Both Database names and Table names should be case insensitive (since some file systems have problems differentiating between upper and lower case filenames).
Any database/table names provided by the user should be converted into lowercase before saving out to the filesystem.
You should treat column names as case insensitive for querying, but you should _preserve_ the case when storing them (i.e. do NOT convert them to lower case).
This is so that the user can define attribute names using CamelCase if they wish (which is a useful aid to readability).